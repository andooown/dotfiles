#!/bin/bash
set -e

DOTFILES_DIR=${HOME}/.dotfiles
DOTFILES_TARBALL="https://github.com/andooown/dotfiles/tarball/master"
REMOTE_URL="https://github.com/andooown/dotfiles.git"


has() {
  type "$1" > /dev/null 2>&1
}

usage() {
  name=`basename $0`
  cat <<EOF
Usage:
    $name [arguments] [command]
Commands:
    deploy
    initialize
Arguments:
    -f $(tput setaf 1)** warning **$(tput sgr0) Overwrite dotfiles.
    -h Print help (this message)
EOF

  exit 1
}


while getopts :f:h opt; do
  case ${opt} in
    f)
      OVERWRITE=true
      ;;
    h)
      usage
      ;;
  esac
done
shift $((OPTIND - 1))

link_files() {
  cd ${DOTFILES_DIR}

  for f in $(find . -type f)
  do
    # exclude files
    [[ ${f} =~ /\.git/ ]] && continue
    [[ ${f} =~ \.gitignore ]] && [[ ! ${f} =~ global ]] && continue
    [[ ${f} =~ Brewfile ]] && continue

    path_from_parent=${f#./}
    source_path=$HOME/.dotfiles/${path_from_parent}
    target_path=$HOME/${path_from_parent}

    # make directory if not exist
    target_parent_dir=$(dirname ${target_path})
    if [ ! -d $target_parent_dir ]; then
      mkdir -p ${target_parent_dir}
    fi

    # link file
    ln -snfv ${source_path} ${target_path}
  done

  echo $(tput setaf 2)Deploy dotfiles complete!. ✔︎$(tput sgr0)
}

initialize() {
  if [ -n "${OVERWRITE}" -o ! -d ${DOTFILES_DIR} ]; then
    echo "Downloading dotfiles..."
    rm -rf ${DOTFILES_DIR}

    if has "git"; then
      git clone --recursive "${REMOTE_URL}" "${DOTFILES_DIR}"
    else
      mkdir ${DOTFILES_DIR}
      curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL}
      tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIR}
      rm -f ${HOME}/dotfiles.tar.gz
    fi

    echo $(tput setaf 2)Download dotfiles complete!. ✔︎$(tput sgr0)
  fi

  if has "brew"; then
    echo "$(tput setaf 2)Already installed Homebrew ✔︎$(tput sgr0)"
  else
    echo "Installing Homebrew..."
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi

  if has "brew"; then
    echo "Updating Homebrew..."
    brew update
    [[ $? ]] && echo "$(tput setaf 2)Update Homebrew complete. ✔︎$(tput sgr0)"

    echo "Installing Homebrew formulaes and casks and Mac App Store applications..."
    cd $DOTFILES_DIR
    brew bundle
    cd -
    echo "$(tput setaf 2)Install Homebrew formulaes and casks and Mac App Store applications complete. ✔︎$(tput sgr0)"

    echo "Cleanup Homebrew..."
    brew cleanup
    echo "$(tput setaf 2)Cleanup Homebrew complete. ✔︎$(tput sgr0)"
  fi

  homebrew_prefix=$(brew --prefix)
  homebrew_zsh_path="${brew_prefix%/}/bin/zsh"
  if [ ${SHELL} != ${homebrew_zsh_path}  ]; then
    if [ -z `grep "${homebrew_zsh_path}" /etc/shells` ]; then
      echo "${homebrew_zsh_path}" | sudo tee -a /etc/shells
    fi
    chsh -s "${homebrew_zsh_path}"
    echo "$(tput setaf 2)Updated default shell to ${homebrew_zsh_path} ✔︎$(tput sgr0)"
  else
    echo "$(tput setaf 2)Already used ${homebrew_zsh_path} ✔︎$(tput sgr0)"
  fi

  if [ ! -d "${ZDOTDIR:-$HOME}/.zprezto" ]; then
    echo "Installing prezto..."
    git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
    echo "$(tput setaf 2)Installed prezto ✔︎$(tput sgr0)"

    echo "Installing powerline fonts..."
    git clone https://github.com/powerline/fonts.git --depth=1
    cd fonts
    ./install.sh
    cd ..
    rm -rf fonts
    echo "$(tput setaf 2)Installed powerline fonts ✔︎$(tput sgr0)"
  fi

  if has "anyenv"; then
    echo "Initialize anyenv..."
    anyenv install --init
    echo "$(tput setaf 2)Initialized anyenv ✔︎$(tput sgr0)"
  fi

  if [ ! -d "${HOME}/.tmux/plugins/tpm" ]; then
    echo "Installing tpm..."
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    echo "$(tput setaf 2)Installed tpm ✔︎$(tput sgr0)"
  fi

  echo "Installing vim-plug..."
  curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  echo "$(tput setaf 2)Installed vim-plug ✔︎$(tput sgr0)"

  echo "$(tput setaf 2)Initialize complete!. ✔︎$(tput sgr0)"
}


command=$1
[ $# -gt 0 ] && shift

case $command in
  deploy)
    link_files
    ;;
  init*)
    initialize
    ;;
  *)
    usage
    ;;
esac

exit 0
